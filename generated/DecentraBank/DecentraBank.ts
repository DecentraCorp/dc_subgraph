// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundWithdrawl extends ethereum.Event {
  get params(): FundWithdrawl__Params {
    return new FundWithdrawl__Params(this);
  }
}

export class FundWithdrawl__Params {
  _event: FundWithdrawl;

  constructor(event: FundWithdrawl) {
    this._event = event;
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenType(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCollateral extends ethereum.Event {
  get params(): NewCollateral__Params {
    return new NewCollateral__Params(this);
  }
}

export class NewCollateral__Params {
  _event: NewCollateral;

  constructor(event: NewCollateral) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StockPurchased extends ethereum.Event {
  get params(): StockPurchased__Params {
    return new StockPurchased__Params(this);
  }
}

export class StockPurchased__Params {
  _event: StockPurchased;

  constructor(event: StockPurchased) {
    this._event = event;
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stockAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StockSold extends ethereum.Event {
  get params(): StockSold__Params {
    return new StockSold__Params(this);
  }
}

export class StockSold__Params {
  _event: StockSold;

  constructor(event: StockSold) {
    this._event = event;
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stockAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserveAmountAdded(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DecentraBank extends ethereum.SmartContract {
  static bind(address: Address): DecentraBank {
    return new DecentraBank("DecentraBank", address);
  }

  DC(): Address {
    let result = super.call("DC", "DC():(address)", []);

    return result[0].toAddress();
  }

  try_DC(): ethereum.CallResult<Address> {
    let result = super.tryCall("DC", "DC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DD(): Address {
    let result = super.call("DD", "DD():(address)", []);

    return result[0].toAddress();
  }

  try_DD(): ethereum.CallResult<Address> {
    let result = super.tryCall("DD", "DD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DS(): Address {
    let result = super.call("DS", "DS():(address)", []);

    return result[0].toAddress();
  }

  try_DS(): ethereum.CallResult<Address> {
    let result = super.tryCall("DS", "DS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAX_WEIGHT(): BigInt {
    let result = super.call("MAX_WEIGHT", "MAX_WEIGHT():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_WEIGHT", "MAX_WEIGHT():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePoolBal(): BigInt {
    let result = super.call(
      "calculatePoolBal",
      "calculatePoolBal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculatePoolBal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePoolBal",
      "calculatePoolBal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePurchase(_dollarAmount: BigInt): BigInt {
    let result = super.call(
      "calculatePurchase",
      "calculatePurchase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_dollarAmount)]
    );

    return result[0].toBigInt();
  }

  try_calculatePurchase(_dollarAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePurchase",
      "calculatePurchase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_dollarAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePurchaseReturn(
    _supply: BigInt,
    _connectorBalance: BigInt,
    _connectorWeight: BigInt,
    _depositAmount: BigInt
  ): BigInt {
    let result = super.call(
      "calculatePurchaseReturn",
      "calculatePurchaseReturn(uint256,uint256,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromUnsignedBigInt(_connectorBalance),
        ethereum.Value.fromUnsignedBigInt(_connectorWeight),
        ethereum.Value.fromUnsignedBigInt(_depositAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculatePurchaseReturn(
    _supply: BigInt,
    _connectorBalance: BigInt,
    _connectorWeight: BigInt,
    _depositAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePurchaseReturn",
      "calculatePurchaseReturn(uint256,uint256,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromUnsignedBigInt(_connectorBalance),
        ethereum.Value.fromUnsignedBigInt(_connectorWeight),
        ethereum.Value.fromUnsignedBigInt(_depositAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSale(_stockAmount: BigInt): BigInt {
    let result = super.call(
      "calculateSale",
      "calculateSale(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_stockAmount)]
    );

    return result[0].toBigInt();
  }

  try_calculateSale(_stockAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSale",
      "calculateSale(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_stockAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSaleReturn(
    _supply: BigInt,
    _connectorBalance: BigInt,
    _connectorWeight: BigInt,
    _sellAmount: BigInt
  ): BigInt {
    let result = super.call(
      "calculateSaleReturn",
      "calculateSaleReturn(uint256,uint256,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromUnsignedBigInt(_connectorBalance),
        ethereum.Value.fromUnsignedBigInt(_connectorWeight),
        ethereum.Value.fromUnsignedBigInt(_sellAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateSaleReturn(
    _supply: BigInt,
    _connectorBalance: BigInt,
    _connectorWeight: BigInt,
    _sellAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSaleReturn",
      "calculateSaleReturn(uint256,uint256,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromUnsignedBigInt(_connectorBalance),
        ethereum.Value.fromUnsignedBigInt(_connectorWeight),
        ethereum.Value.fromUnsignedBigInt(_sellAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralCount(): BigInt {
    let result = super.call(
      "collateralCount",
      "collateralCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralCount",
      "collateralCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralTypes(param0: BigInt): Address {
    let result = super.call(
      "collateralTypes",
      "collateralTypes(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_collateralTypes(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralTypes",
      "collateralTypes(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  connectorWeight(): BigInt {
    let result = super.call(
      "connectorWeight",
      "connectorWeight():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_connectorWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "connectorWeight",
      "connectorWeight():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  divisor(): BigInt {
    let result = super.call("divisor", "divisor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_divisor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("divisor", "divisor():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fractionalReserveValue(): BigInt {
    let result = super.call(
      "fractionalReserveValue",
      "fractionalReserveValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fractionalReserveValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fractionalReserveValue",
      "fractionalReserveValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedBalance(): BigInt {
    let result = super.call("lockedBalance", "lockedBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedBalance",
      "lockedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  percent(): BigInt {
    let result = super.call("percent", "percent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("percent", "percent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refundRatio(): BigInt {
    let result = super.call("refundRatio", "refundRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refundRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("refundRatio", "refundRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _Dcore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _Dstock(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _Ddollar(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _connectorWeight(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _refundRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNewCollateralTypeCall extends ethereum.Call {
  get inputs(): AddNewCollateralTypeCall__Inputs {
    return new AddNewCollateralTypeCall__Inputs(this);
  }

  get outputs(): AddNewCollateralTypeCall__Outputs {
    return new AddNewCollateralTypeCall__Outputs(this);
  }
}

export class AddNewCollateralTypeCall__Inputs {
  _call: AddNewCollateralTypeCall;

  constructor(call: AddNewCollateralTypeCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddNewCollateralTypeCall__Outputs {
  _call: AddNewCollateralTypeCall;

  constructor(call: AddNewCollateralTypeCall) {
    this._call = call;
  }
}

export class FundWithdrawlCall extends ethereum.Call {
  get inputs(): FundWithdrawlCall__Inputs {
    return new FundWithdrawlCall__Inputs(this);
  }

  get outputs(): FundWithdrawlCall__Outputs {
    return new FundWithdrawlCall__Outputs(this);
  }
}

export class FundWithdrawlCall__Inputs {
  _call: FundWithdrawlCall;

  constructor(call: FundWithdrawlCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _type(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundWithdrawlCall__Outputs {
  _call: FundWithdrawlCall;

  constructor(call: FundWithdrawlCall) {
    this._call = call;
  }
}

export class PurchaseStockCall extends ethereum.Call {
  get inputs(): PurchaseStockCall__Inputs {
    return new PurchaseStockCall__Inputs(this);
  }

  get outputs(): PurchaseStockCall__Outputs {
    return new PurchaseStockCall__Outputs(this);
  }
}

export class PurchaseStockCall__Inputs {
  _call: PurchaseStockCall;

  constructor(call: PurchaseStockCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PurchaseStockCall__Outputs {
  _call: PurchaseStockCall;

  constructor(call: PurchaseStockCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellStockCall extends ethereum.Call {
  get inputs(): SellStockCall__Inputs {
    return new SellStockCall__Inputs(this);
  }

  get outputs(): SellStockCall__Outputs {
    return new SellStockCall__Outputs(this);
  }
}

export class SellStockCall__Inputs {
  _call: SellStockCall;

  constructor(call: SellStockCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SellStockCall__Outputs {
  _call: SellStockCall;

  constructor(call: SellStockCall) {
    this._call = call;
  }
}

export class SetUpCall extends ethereum.Call {
  get inputs(): SetUpCall__Inputs {
    return new SetUpCall__Inputs(this);
  }

  get outputs(): SetUpCall__Outputs {
    return new SetUpCall__Outputs(this);
  }
}

export class SetUpCall__Inputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class SetUpCall__Outputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
